/* tslint:disable */
/* eslint-disable */
/*
Coalesce API

REST API for performing operations with the Coalesce backend.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { RunInfo } from '../models';
// @ts-ignore
import { RunResultsResponse } from '../models';
// @ts-ignore
import { RunStatus } from '../models';
// @ts-ignore
import { RunType } from '../models';
// @ts-ignore
import { RunsOrderBy } from '../models';
// @ts-ignore
import { RunsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RunsApi - axios parameter creator
 * @export
 */
export const RunsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a single run.
         * @summary Get Run
         * @param {number} runID The run ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunDetails: async (runID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runID' is not null or undefined
            assertParamExists('getRunDetails', 'runID', runID)
            const localVarPath = `/api/v1/runs/{runID}`
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID !== undefined ? runID : `-runID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/runs/{runID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a collection of information about runs.
         * @summary List Runs
         * @param {number} [limit] The maximum number of runs to return.
         * @param {RunsListInformationStartingFromParameter} [startingFrom] The starting run ID, runStartTime, or runEndTime (exclusive) for paging the query results.
         * @param {RunsOrderBy} [orderBy] The field used to order results.
         * @param {'asc' | 'desc'} [orderByDirection] The sort order for query results.
         * @param {RunType} [runType] A run type to filter the query results.
         * @param {RunStatus} [runStatus] A status value to filter the query results.
         * @param {string} [environmentID] An environment ID to filter the query results.
         * @param {boolean} [detail] Include the full detail of the run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformation: async (limit?: number, startingFrom?: RunsListInformationStartingFromParameter, orderBy?: RunsOrderBy, orderByDirection?: 'asc' | 'desc', runType?: RunType, runStatus?: RunStatus, environmentID?: string, detail?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/runs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingFrom !== undefined) {
                localVarQueryParameter['startingFrom'] = startingFrom;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderByDirection !== undefined) {
                localVarQueryParameter['orderByDirection'] = orderByDirection;
            }

            if (runType !== undefined) {
                localVarQueryParameter['runType'] = runType;
            }

            if (runStatus !== undefined) {
                localVarQueryParameter['runStatus'] = runStatus;
            }

            if (environmentID !== undefined) {
                localVarQueryParameter['environmentID'] = environmentID;
            }

            if (detail !== undefined) {
                localVarQueryParameter['detail'] = detail;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/runs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a collection of the results of a deploy or refresh run
         * @summary List Run Results
         * @param {number} runID The run ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResults: async (runID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runID' is not null or undefined
            assertParamExists('listResults', 'runID', runID)
            const localVarPath = `/api/v1/runs/{runID}/results`
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID !== undefined ? runID : `-runID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/runs/{runID}/results',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RunsApi - functional programming interface
 * @export
 */
export const RunsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RunsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a single run.
         * @summary Get Run
         * @param {RunsApiGetRunDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunDetails(requestParameters: RunsApiGetRunDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunDetails(requestParameters.runID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a collection of information about runs.
         * @summary List Runs
         * @param {RunsApiListInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInformation(requestParameters: RunsApiListInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInformation(requestParameters.limit, requestParameters.startingFrom, requestParameters.orderBy, requestParameters.orderByDirection, requestParameters.runType, requestParameters.runStatus, requestParameters.environmentID, requestParameters.detail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a collection of the results of a deploy or refresh run
         * @summary List Run Results
         * @param {RunsApiListResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResults(requestParameters: RunsApiListResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResults(requestParameters.runID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RunsApi - factory interface
 * @export
 */
export const RunsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RunsApiFp(configuration)
    return {
        /**
         * Gets a single run.
         * @summary Get Run
         * @param {RunsApiGetRunDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunDetails(requestParameters: RunsApiGetRunDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<RunInfo> {
            return localVarFp.getRunDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a collection of information about runs.
         * @summary List Runs
         * @param {RunsApiListInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInformation(requestParameters: RunsApiListInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RunsResponse> {
            return localVarFp.listInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a collection of the results of a deploy or refresh run
         * @summary List Run Results
         * @param {RunsApiListResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResults(requestParameters: RunsApiListResultsRequest, options?: AxiosRequestConfig): AxiosPromise<RunResultsResponse> {
            return localVarFp.listResults(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRunDetails operation in RunsApi.
 * @export
 * @interface RunsApiGetRunDetailsRequest
 */
export type RunsApiGetRunDetailsRequest = {
    
    /**
    * The run ID.
    * @type {number}
    * @memberof RunsApiGetRunDetails
    */
    readonly runID: number
    
}

/**
 * Request parameters for listInformation operation in RunsApi.
 * @export
 * @interface RunsApiListInformationRequest
 */
export type RunsApiListInformationRequest = {
    
    /**
    * The maximum number of runs to return.
    * @type {number}
    * @memberof RunsApiListInformation
    */
    readonly limit?: number
    
    /**
    * The starting run ID, runStartTime, or runEndTime (exclusive) for paging the query results.
    * @type {RunsListInformationStartingFromParameter}
    * @memberof RunsApiListInformation
    */
    readonly startingFrom?: RunsListInformationStartingFromParameter
    
    /**
    * The field used to order results.
    * @type {RunsOrderBy}
    * @memberof RunsApiListInformation
    */
    readonly orderBy?: RunsOrderBy
    
    /**
    * The sort order for query results.
    * @type {'asc' | 'desc'}
    * @memberof RunsApiListInformation
    */
    readonly orderByDirection?: 'asc' | 'desc'
    
    /**
    * A run type to filter the query results.
    * @type {RunType}
    * @memberof RunsApiListInformation
    */
    readonly runType?: RunType
    
    /**
    * A status value to filter the query results.
    * @type {RunStatus}
    * @memberof RunsApiListInformation
    */
    readonly runStatus?: RunStatus
    
    /**
    * An environment ID to filter the query results.
    * @type {string}
    * @memberof RunsApiListInformation
    */
    readonly environmentID?: string
    
    /**
    * Include the full detail of the run.
    * @type {boolean}
    * @memberof RunsApiListInformation
    */
    readonly detail?: boolean
    
}

/**
 * Request parameters for listResults operation in RunsApi.
 * @export
 * @interface RunsApiListResultsRequest
 */
export type RunsApiListResultsRequest = {
    
    /**
    * The run ID.
    * @type {number}
    * @memberof RunsApiListResults
    */
    readonly runID: number
    
}

/**
 * RunsApiGenerated - object-oriented interface
 * @export
 * @class RunsApiGenerated
 * @extends {BaseAPI}
 */
export class RunsApiGenerated extends BaseAPI {
    /**
     * Gets a single run.
     * @summary Get Run
     * @param {RunsApiGetRunDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApiGenerated
     */
    public getRunDetails(requestParameters: RunsApiGetRunDetailsRequest, options?: AxiosRequestConfig) {
        return RunsApiFp(this.configuration).getRunDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a collection of information about runs.
     * @summary List Runs
     * @param {RunsApiListInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApiGenerated
     */
    public listInformation(requestParameters: RunsApiListInformationRequest = {}, options?: AxiosRequestConfig) {
        return RunsApiFp(this.configuration).listInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a collection of the results of a deploy or refresh run
     * @summary List Run Results
     * @param {RunsApiListResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApiGenerated
     */
    public listResults(requestParameters: RunsApiListResultsRequest, options?: AxiosRequestConfig) {
        return RunsApiFp(this.configuration).listResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
