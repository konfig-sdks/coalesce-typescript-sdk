/* tslint:disable */
/* eslint-disable */
/*
Coalesce API

REST API for performing operations with the Coalesce backend.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JobsCancelJobRun400Response } from '../models';
// @ts-ignore
import { JobsCancelJobRun401Response } from '../models';
// @ts-ignore
import { JobsCancelJobRunRequest } from '../models';
// @ts-ignore
import { JobsGetStatusUpdates400Response } from '../models';
// @ts-ignore
import { JobsGetStatusUpdates401Response } from '../models';
// @ts-ignore
import { JobsGetStatusUpdatesResponse } from '../models';
// @ts-ignore
import { JobsInitiateRun400Response } from '../models';
// @ts-ignore
import { JobsInitiateRun401Response } from '../models';
// @ts-ignore
import { JobsInitiateRunRequest } from '../models';
// @ts-ignore
import { JobsInitiateRunRequestRunDetails } from '../models';
// @ts-ignore
import { JobsInitiateRunRequestUserCredentials } from '../models';
// @ts-ignore
import { JobsInitiateRunResponse } from '../models';
// @ts-ignore
import { JobsTriggerRerun400Response } from '../models';
// @ts-ignore
import { JobsTriggerRerun401Response } from '../models';
// @ts-ignore
import { JobsTriggerRerunRequest } from '../models';
// @ts-ignore
import { JobsTriggerRerunRequestRunDetails } from '../models';
// @ts-ignore
import { JobsTriggerRerunRequestUserCredentials } from '../models';
// @ts-ignore
import { JobsTriggerRerunResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Querying this endpoint will cancel a currently running job.
         * @summary Cancel Running Job
         * @param {JobsCancelJobRunRequest} [jobsCancelJobRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobRun: async (jobsCancelJobRunRequest?: JobsCancelJobRunRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scheduler/cancelRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsCancelJobRunRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scheduler/cancelRun',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsCancelJobRunRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Querying this endpoint will allow you to receive updates on the current status of a specific run.
         * @summary Get Job Status
         * @param {number} runCounter ID of the run to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUpdates: async (runCounter: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runCounter' is not null or undefined
            assertParamExists('getStatusUpdates', 'runCounter', runCounter)
            const localVarPath = `/scheduler/runStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (runCounter !== undefined) {
                localVarQueryParameter['runCounter'] = runCounter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scheduler/runStatus',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Run
         * @param {JobsInitiateRunRequest} [jobsInitiateRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRun: async (jobsInitiateRunRequest?: JobsInitiateRunRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scheduler/startRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsInitiateRunRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scheduler/startRun',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsInitiateRunRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Re-Run
         * @param {JobsTriggerRerunRequest} [jobsTriggerRerunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRerun: async (jobsTriggerRerunRequest?: JobsTriggerRerunRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scheduler/rerun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsTriggerRerunRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/scheduler/rerun',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsTriggerRerunRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Querying this endpoint will cancel a currently running job.
         * @summary Cancel Running Job
         * @param {JobsApiCancelJobRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelJobRun(requestParameters: JobsApiCancelJobRunRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const jobsCancelJobRunRequest: JobsCancelJobRunRequest = {
                runID: requestParameters.runID,
                orgID: requestParameters.orgID,
                environmentID: requestParameters.environmentID
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelJobRun(jobsCancelJobRunRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Querying this endpoint will allow you to receive updates on the current status of a specific run.
         * @summary Get Job Status
         * @param {JobsApiGetStatusUpdatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusUpdates(requestParameters: JobsApiGetStatusUpdatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsGetStatusUpdatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusUpdates(requestParameters.runCounter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Run
         * @param {JobsApiInitiateRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateRun(requestParameters: JobsApiInitiateRunRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsInitiateRunResponse>> {
            const jobsInitiateRunRequest: JobsInitiateRunRequest = {
                parameters: requestParameters.parameters,
                runDetails: requestParameters.runDetails,
                userCredentials: requestParameters.userCredentials
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateRun(jobsInitiateRunRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Re-Run
         * @param {JobsApiTriggerRerunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerRerun(requestParameters: JobsApiTriggerRerunRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsTriggerRerunResponse>> {
            const jobsTriggerRerunRequest: JobsTriggerRerunRequest = {
                parameters: requestParameters.parameters,
                runDetails: requestParameters.runDetails,
                userCredentials: requestParameters.userCredentials
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerRerun(jobsTriggerRerunRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * Querying this endpoint will cancel a currently running job.
         * @summary Cancel Running Job
         * @param {JobsApiCancelJobRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobRun(requestParameters: JobsApiCancelJobRunRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancelJobRun(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Querying this endpoint will allow you to receive updates on the current status of a specific run.
         * @summary Get Job Status
         * @param {JobsApiGetStatusUpdatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUpdates(requestParameters: JobsApiGetStatusUpdatesRequest, options?: AxiosRequestConfig): AxiosPromise<JobsGetStatusUpdatesResponse> {
            return localVarFp.getStatusUpdates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Run
         * @param {JobsApiInitiateRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRun(requestParameters: JobsApiInitiateRunRequest, options?: AxiosRequestConfig): AxiosPromise<JobsInitiateRunResponse> {
            return localVarFp.initiateRun(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
         * @summary Trigger Job to Re-Run
         * @param {JobsApiTriggerRerunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRerun(requestParameters: JobsApiTriggerRerunRequest, options?: AxiosRequestConfig): AxiosPromise<JobsTriggerRerunResponse> {
            return localVarFp.triggerRerun(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelJobRun operation in JobsApi.
 * @export
 * @interface JobsApiCancelJobRunRequest
 */
export type JobsApiCancelJobRunRequest = {
    
} & JobsCancelJobRunRequest

/**
 * Request parameters for getStatusUpdates operation in JobsApi.
 * @export
 * @interface JobsApiGetStatusUpdatesRequest
 */
export type JobsApiGetStatusUpdatesRequest = {
    
    /**
    * ID of the run to query
    * @type {number}
    * @memberof JobsApiGetStatusUpdates
    */
    readonly runCounter: number
    
}

/**
 * Request parameters for initiateRun operation in JobsApi.
 * @export
 * @interface JobsApiInitiateRunRequest
 */
export type JobsApiInitiateRunRequest = {
    
} & JobsInitiateRunRequest

/**
 * Request parameters for triggerRerun operation in JobsApi.
 * @export
 * @interface JobsApiTriggerRerunRequest
 */
export type JobsApiTriggerRerunRequest = {
    
} & JobsTriggerRerunRequest

/**
 * JobsApiGenerated - object-oriented interface
 * @export
 * @class JobsApiGenerated
 * @extends {BaseAPI}
 */
export class JobsApiGenerated extends BaseAPI {
    /**
     * Querying this endpoint will cancel a currently running job.
     * @summary Cancel Running Job
     * @param {JobsApiCancelJobRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public cancelJobRun(requestParameters: JobsApiCancelJobRunRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).cancelJobRun(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Querying this endpoint will allow you to receive updates on the current status of a specific run.
     * @summary Get Job Status
     * @param {JobsApiGetStatusUpdatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getStatusUpdates(requestParameters: JobsApiGetStatusUpdatesRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getStatusUpdates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
     * @summary Trigger Job to Run
     * @param {JobsApiInitiateRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public initiateRun(requestParameters: JobsApiInitiateRunRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).initiateRun(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
     * @summary Trigger Job to Re-Run
     * @param {JobsApiTriggerRerunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public triggerRerun(requestParameters: JobsApiTriggerRerunRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).triggerRerun(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
